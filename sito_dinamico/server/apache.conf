# Abilita i moduli proxy necessari. Questi sono spesso già inclusi
# e abilitati nell'immagine ufficiale httpd, ma li menzioniamo per chiarezza.
# LoadModule proxy_module modules/mod_proxy.so
# LoadModule proxy_http_module modules/mod_proxy_http.so

# <VirtualHost *:80>: Definisce un virtual host che ascolta sulla porta 80
# su tutte le interfacce di rete del container Apache.
<VirtualHost *:80>
    # Nome del server. Sostituiscilo con il tuo nome dominio o l'indirizzo IP
    # che gli utenti utilizzeranno per raggiungere il tuo sito.
    ServerName tuo_dominio.it
    #ServerAlias www.tuo_dominio.it # Opzionale: se vuoi includere anche il prefisso www

    # Indirizzo email dell'amministratore (opzionale ma consigliato)
    ServerAdmin webmaster@localhost

    # Configura Apache per agire da reverse proxy.
    # Inoltra tutte le richieste ricevute da questo Virtual Host
    # all'indirizzo e porta del servizio 'app' (il tuo container Flask)
    # definito nel file docker-compose.yml.
    # Il nome 'app' viene risolto all'interno della rete Docker.
    # La porta '8000' è quella su cui Gunicorn/uWSGI sta ascoltando nel container 'app'.

    # ProxyPreserveHost On: Passa l'header 'Host' originale al backend (utile per Flask).
    ProxyPreserveHost On

    # ProxyPass: Mappa un percorso URL (qui '/', la root) a un indirizzo di backend.
    # Tutte le richieste a tuo_dominio.it/ verranno inoltrate a http://app:8000/
    ProxyPass / http://app:8000/

    # ProxyPassReverse: Regola gli URL negli header 'Location', 'Content-Location'
    # e 'URI' nelle risposte del backend per farli puntare correttamente all'URL
    # del proxy (il tuo_dominio.it). Essenziale per i redirect.
    ProxyPassReverse / http://app:8000/


    # --- Gestione dei File Statici (Opzionale ma Consigliato per le Performance) ---
    # Invece di far gestire i file statici (CSS, JS, immagini) all'applicazione Flask
    # (che è meno efficiente), puoi configurare Apache per servirli direttamente.
    # Questo richiede che i file statici siano accessibili al container Apache.
    # Ci sono due modi principali per farlo:
    # 1. Copiare i file statici nel Dockerfile del server web (meno flessibile).
    # 2. Montare la directory dei file statici dell'app come un Volume nel container Apache (più comune).
    #    Questo è l'approccio implicito nell'esempio di docker-compose.yml con il volume.

    # Alias: Mappa un percorso URL (qui '/static') a una directory fisica sul server.
    # Le richieste a tuo_dominio.it/static/verranno servite dalla directory specificata.
    # Assicurati che '/usr/local/apache2/htdocs/static' sia il percorso CORRETTO
    # all'interno del container Apache dove i file statici sono accessibili (es. tramite un Volume).
    # Alias /static /usr/local/apache2/htdocs/static

    # <Directory ...>: Applica configurazioni specifiche alla directory dei file statici.
    # <Directory /usr/local/apache2/htdocs/static>
        # Options Indexes FollowSymLinks
        # AllowOverride None
        # Require all granted # Permette l'accesso alla directory
    # </Directory>
    # ------------------------------------------------------------------------------


    # Configurazione dei log degli errori e degli accessi
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

</VirtualHost>

# Puoi aggiungere altri Virtual Host qui, ad esempio per HTTPS sulla porta 443.
# Assicurati che i moduli SSL siano abilitati e che i certificati siano gestiti.
# <VirtualHost *:443>
#    ServerName tuo_dominio.it
#    # ... configurazione SSL (SSLEngine, SSLCertificateFile, SSLCertificateKeyFile) ...
#    ProxyPreserveHost On
#    ProxyPass / http://app:8000/
#    ProxyPassReverse / http://app:8000/
#